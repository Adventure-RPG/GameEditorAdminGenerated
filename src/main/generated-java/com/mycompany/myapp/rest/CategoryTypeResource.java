/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.mycompany.myapp.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestBody;

import com.mycompany.myapp.domain.CategoryType;
import com.mycompany.myapp.dto.CategoryTypeDTO;
import com.mycompany.myapp.dto.CategoryTypeDTOService;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.CategoryTypeRepository;
import com.mycompany.myapp.rest.support.AutoCompleteQuery;

@RestController
@RequestMapping("/api/categoryTypes")
public class CategoryTypeResource {

    private final Logger log = LoggerFactory.getLogger(CategoryTypeResource.class);

    @Inject
    private CategoryTypeRepository categoryTypeRepository;
    @Inject
    private CategoryTypeDTOService categoryTypeDTOService;

    /**
     * Create a new CategoryType.
     */
    @RequestMapping(value = "/", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CategoryTypeDTO> create(@RequestBody CategoryTypeDTO categoryTypeDTO) throws URISyntaxException {

        log.debug("Create CategoryTypeDTO : {}", categoryTypeDTO);

        if (categoryTypeDTO.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create CategoryType with existing ID").body(null);
        }

        CategoryTypeDTO result = categoryTypeDTOService.save(categoryTypeDTO);

        return ResponseEntity.created(new URI("/api/categoryTypes/" + result.id)).body(result);
    }

    /**
    * Find by id CategoryType.
    */
    @RequestMapping(value = "/{id}", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CategoryTypeDTO> findById(@PathVariable Integer id) throws URISyntaxException {

        log.debug("Find by id CategoryType : {}", id);

        return Optional.ofNullable(categoryTypeDTOService.findOne(id)).map(categoryTypeDTO -> new ResponseEntity<>(categoryTypeDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Update CategoryType.
     */
    @RequestMapping(value = "/", method = PUT, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CategoryTypeDTO> update(@RequestBody CategoryTypeDTO categoryTypeDTO) throws URISyntaxException {

        log.debug("Update CategoryTypeDTO : {}", categoryTypeDTO);

        if (!categoryTypeDTO.isIdSet()) {
            return create(categoryTypeDTO);
        }

        CategoryTypeDTO result = categoryTypeDTOService.save(categoryTypeDTO);

        return ResponseEntity.ok().body(result);
    }

    /**
     * Find a Page of CategoryType using query by example.
     */
    @RequestMapping(value = "/page", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<CategoryTypeDTO>> findAll(@RequestBody PageRequestByExample<CategoryTypeDTO> prbe) throws URISyntaxException {
        PageResponse<CategoryTypeDTO> pageResponse = categoryTypeDTOService.findAll(prbe);
        return new ResponseEntity<>(pageResponse, new HttpHeaders(), HttpStatus.OK);
    }

    /**
    * Auto complete support.
    */
    @RequestMapping(value = "/complete", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<CategoryTypeDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {

        List<CategoryTypeDTO> results = categoryTypeDTOService.complete(acq.query, acq.maxResults);

        return new ResponseEntity<>(results, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Delete by id CategoryType.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {

        log.debug("Delete by id CategoryType : {}", id);

        try {
            categoryTypeRepository.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely org.hibernate.exception.ConstraintViolationException
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}