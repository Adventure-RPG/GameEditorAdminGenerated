/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.mycompany.myapp.domain;

import static javax.persistence.FetchType.LAZY;
import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.time.Instant;
import java.util.logging.Logger;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import com.mycompany.myapp.audit.AuditContextHolder;

@Entity
@Table(name = "characteristic")
public class Characteristic implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Characteristic.class.getName());

    // Raw attributes
    private Integer id;
    private Integer strength;
    private Integer agility;
    private Integer endurance;
    private Integer intelligence;
    private Integer charisma;
    private Integer perception;
    private Integer luck;
    private Integer pointsAvailable;
    private Integer skillAvailable;
    private Instant creationDate;
    private String creationAuthor;
    private Instant lastModificationDate;
    private String lastModificationAuthor;
    private Integer version;

    // One to one
    private Character characteristics;

    @Override
    public String entityClassName() {
        return Characteristic.class.getSimpleName();
    }

    // -- [id] ------------------------

    @Override
    @Column(name = "id", precision = 10)
    @GeneratedValue(strategy = IDENTITY)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Characteristic id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null;
    }
    // -- [strength] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "strength", nullable = false, precision = 10)
    public Integer getStrength() {
        return strength;
    }

    public void setStrength(Integer strength) {
        this.strength = strength;
    }

    public Characteristic strength(Integer strength) {
        setStrength(strength);
        return this;
    }
    // -- [agility] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "agility", nullable = false, precision = 10)
    public Integer getAgility() {
        return agility;
    }

    public void setAgility(Integer agility) {
        this.agility = agility;
    }

    public Characteristic agility(Integer agility) {
        setAgility(agility);
        return this;
    }
    // -- [endurance] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "endurance", nullable = false, precision = 10)
    public Integer getEndurance() {
        return endurance;
    }

    public void setEndurance(Integer endurance) {
        this.endurance = endurance;
    }

    public Characteristic endurance(Integer endurance) {
        setEndurance(endurance);
        return this;
    }
    // -- [intelligence] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "intelligence", nullable = false, precision = 10)
    public Integer getIntelligence() {
        return intelligence;
    }

    public void setIntelligence(Integer intelligence) {
        this.intelligence = intelligence;
    }

    public Characteristic intelligence(Integer intelligence) {
        setIntelligence(intelligence);
        return this;
    }
    // -- [charisma] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "charisma", nullable = false, precision = 10)
    public Integer getCharisma() {
        return charisma;
    }

    public void setCharisma(Integer charisma) {
        this.charisma = charisma;
    }

    public Characteristic charisma(Integer charisma) {
        setCharisma(charisma);
        return this;
    }
    // -- [perception] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "perception", nullable = false, precision = 10)
    public Integer getPerception() {
        return perception;
    }

    public void setPerception(Integer perception) {
        this.perception = perception;
    }

    public Characteristic perception(Integer perception) {
        setPerception(perception);
        return this;
    }
    // -- [luck] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "luck", nullable = false, precision = 10)
    public Integer getLuck() {
        return luck;
    }

    public void setLuck(Integer luck) {
        this.luck = luck;
    }

    public Characteristic luck(Integer luck) {
        setLuck(luck);
        return this;
    }
    // -- [pointsAvailable] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "points_available", nullable = false, precision = 10)
    public Integer getPointsAvailable() {
        return pointsAvailable;
    }

    public void setPointsAvailable(Integer pointsAvailable) {
        this.pointsAvailable = pointsAvailable;
    }

    public Characteristic pointsAvailable(Integer pointsAvailable) {
        setPointsAvailable(pointsAvailable);
        return this;
    }
    // -- [skillAvailable] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "skill_available", nullable = false, precision = 10)
    public Integer getSkillAvailable() {
        return skillAvailable;
    }

    public void setSkillAvailable(Integer skillAvailable) {
        this.skillAvailable = skillAvailable;
    }

    public Characteristic skillAvailable(Integer skillAvailable) {
        setSkillAvailable(skillAvailable);
        return this;
    }
    // -- [creationDate] ------------------------

    @Column(name = "creation_date", length = 29)
    public Instant getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Instant creationDate) {
        this.creationDate = creationDate;
    }

    public Characteristic creationDate(Instant creationDate) {
        setCreationDate(creationDate);
        return this;
    }
    // -- [creationAuthor] ------------------------

    @Column(name = "creation_author", length = 200)
    public String getCreationAuthor() {
        return creationAuthor;
    }

    public void setCreationAuthor(String creationAuthor) {
        this.creationAuthor = creationAuthor;
    }

    public Characteristic creationAuthor(String creationAuthor) {
        setCreationAuthor(creationAuthor);
        return this;
    }
    // -- [lastModificationDate] ------------------------

    @Column(name = "last_modification_date", length = 29)
    public Instant getLastModificationDate() {
        return lastModificationDate;
    }

    public void setLastModificationDate(Instant lastModificationDate) {
        this.lastModificationDate = lastModificationDate;
    }

    public Characteristic lastModificationDate(Instant lastModificationDate) {
        setLastModificationDate(lastModificationDate);
        return this;
    }
    // -- [lastModificationAuthor] ------------------------

    @Column(name = "last_modification_author", length = 200)
    public String getLastModificationAuthor() {
        return lastModificationAuthor;
    }

    public void setLastModificationAuthor(String lastModificationAuthor) {
        this.lastModificationAuthor = lastModificationAuthor;
    }

    public Characteristic lastModificationAuthor(String lastModificationAuthor) {
        setLastModificationAuthor(lastModificationAuthor);
        return this;
    }
    // -- [version] ------------------------

    @Column(name = "version", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Characteristic version(Integer version) {
        setVersion(version);
        return this;
    }

    // -----------------------------------------------------------------
    // One to one
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Inverse side of one-to-one relation: Characteristic.id ==> Character.charcId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    @OneToOne(mappedBy = "charc")
    public Character getCharacteristics() {
        return characteristics;
    }

    public void setCharacteristics(Character characteristics) {
        this.characteristics = characteristics;

        if (this.characteristics != null) {
            this.characteristics.setCharc(this);
        }
    }

    public Characteristic characteristics(Character characteristics) {
        setCharacteristics(characteristics);
        return this;
    }

    /**
     * Apply the default values.
     */
    public Characteristic withDefaults() {
        setPointsAvailable(0);
        setSkillAvailable(0);
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Characteristic && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Characteristic instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("strength", getStrength()) //
                .add("agility", getAgility()) //
                .add("endurance", getEndurance()) //
                .add("intelligence", getIntelligence()) //
                .add("charisma", getCharisma()) //
                .add("perception", getPerception()) //
                .add("luck", getLuck()) //
                .add("pointsAvailable", getPointsAvailable()) //
                .add("skillAvailable", getSkillAvailable()) //
                .add("creationDate", getCreationDate()) //
                .add("creationAuthor", getCreationAuthor()) //
                .add("lastModificationDate", getLastModificationDate()) //
                .add("lastModificationAuthor", getLastModificationAuthor()) //
                .add("version", getVersion()) //
                .toString();
    }

    @PrePersist
    protected void prePersist() {
        if (AuditContextHolder.audit()) {
            setCreationAuthor(AuditContextHolder.username());
            setCreationDate(Instant.now());

        }
    }

    @PreUpdate
    protected void preUpdate() {
        if (AuditContextHolder.audit()) {
            setLastModificationAuthor(AuditContextHolder.username());
            setLastModificationDate(Instant.now());
        }
    }
}