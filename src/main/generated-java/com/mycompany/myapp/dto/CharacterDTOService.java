/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Character;
import com.mycompany.myapp.domain.Character_;
import com.mycompany.myapp.domain.Characteristic;
import com.mycompany.myapp.domain.Race;
import com.mycompany.myapp.domain.Skill;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.CharacterRepository;
import com.mycompany.myapp.repository.CharacteristicRepository;
import com.mycompany.myapp.repository.RaceRepository;
import com.mycompany.myapp.repository.SkillRepository;

/**
 * A simple DTO Facility for Character.
 */
@Service
public class CharacterDTOService {

    @Inject
    private CharacterRepository characterRepository;
    @Inject
    private CharacteristicDTOService characteristicDTOService;
    @Inject
    private CharacteristicRepository characteristicRepository;
    @Inject
    private RaceDTOService raceDTOService;
    @Inject
    private RaceRepository raceRepository;
    @Inject
    private SkillDTOService skillDTOService;
    @Inject
    private SkillRepository skillRepository;

    @Transactional(readOnly = true)
    public CharacterDTO findOne(Integer id) {
        return toDTO(characterRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<CharacterDTO> complete(String query, int maxResults) {
        List<Character> results = characterRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<CharacterDTO> findAll(PageRequestByExample<CharacterDTO> req) {
        Example<Character> example = null;
        Character character = toEntity(req.example);

        if (character != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Character_.username.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(character, matcher);
        }

        Page<Character> page;
        if (example != null) {
            page = characterRepository.findAll(example, req.toPageable());
        } else {
            page = characterRepository.findAll(req.toPageable());
        }

        List<CharacterDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public CharacterDTO save(CharacterDTO dto) {
        if (dto == null) {
            return null;
        }

        final Character character;

        if (dto.isIdSet()) {
            Character characterTmp = characterRepository.findOne(dto.id);
            if (characterTmp != null) {
                character = characterTmp;
            } else {
                character = new Character();
                character.setId(dto.id);
            }
        } else {
            character = new Character();
        }

        character.setUsername(dto.username);

        character.setCreationDate(dto.creationDate);

        character.setCreationAuthor(dto.creationAuthor);

        character.setLastModificationDate(dto.lastModificationDate);

        character.setLastModificationAuthor(dto.lastModificationAuthor);

        character.setVersion(dto.version);

        if (dto.charc == null) {
            character.setCharc(null);
        } else {
            Characteristic charc = character.getCharc();
            if (charc == null || (charc.getId().compareTo(dto.charc.id) != 0)) {
                character.setCharc(characteristicRepository.findOne(dto.charc.id));
            }
        }

        if (dto.race == null) {
            character.setRace(null);
        } else {
            Race race = character.getRace();
            if (race == null || (race.getId().compareTo(dto.race.id) != 0)) {
                character.setRace(raceRepository.findOne(dto.race.id));
            }
        }

        character.getTheSkills().clear();
        if (dto.theSkills != null) {
            dto.theSkills.stream().forEach(anSkill -> character.addAnSkill(skillRepository.findOne(anSkill.id)));
        }

        return toDTO(characterRepository.save(character));
    }

    /**
     * Converts the passed character to a DTO.
     */
    public CharacterDTO toDTO(Character character) {
        return toDTO(character, 1);
    }

    /**
     * Converts the passed character to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param character
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public CharacterDTO toDTO(Character character, int depth) {
        if (character == null) {
            return null;
        }

        CharacterDTO dto = new CharacterDTO();

        dto.id = character.getId();
        dto.username = character.getUsername();
        dto.creationDate = character.getCreationDate();
        dto.creationAuthor = character.getCreationAuthor();
        dto.lastModificationDate = character.getLastModificationDate();
        dto.lastModificationAuthor = character.getLastModificationAuthor();
        dto.version = character.getVersion();
        if (depth-- > 0) {
            dto.charc = characteristicDTOService.toDTO(character.getCharc(), depth);
            dto.race = raceDTOService.toDTO(character.getRace(), depth);
            final int fdepth = depth;
            dto.theSkills = character.getTheSkills().stream().map(anSkill -> skillDTOService.toDTO(anSkill, fdepth)).collect(Collectors.toList());
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Character.
     * Convenient for query by example.
     */
    public Character toEntity(CharacterDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Character.
     * Convenient for query by example.
     */
    public Character toEntity(CharacterDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Character character = new Character();

        character.setId(dto.id);
        character.setUsername(dto.username);
        character.setCreationDate(dto.creationDate);
        character.setCreationAuthor(dto.creationAuthor);
        character.setLastModificationDate(dto.lastModificationDate);
        character.setLastModificationAuthor(dto.lastModificationAuthor);
        character.setVersion(dto.version);
        if (depth-- > 0) {
            character.setCharc(characteristicDTOService.toEntity(dto.charc, depth));
            character.setRace(raceDTOService.toEntity(dto.race, depth));
        }

        return character;
    }
}