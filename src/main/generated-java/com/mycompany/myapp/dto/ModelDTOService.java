/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.CategoryType;
import com.mycompany.myapp.domain.Model;
import com.mycompany.myapp.domain.Model_;
import com.mycompany.myapp.domain.RaceOption;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.CategoryTypeRepository;
import com.mycompany.myapp.repository.ModelRepository;
import com.mycompany.myapp.repository.RaceOptionRepository;

/**
 * A simple DTO Facility for Model.
 */
@Service
public class ModelDTOService {

    @Inject
    private ModelRepository modelRepository;
    @Inject
    private CategoryTypeDTOService categoryTypeDTOService;
    @Inject
    private CategoryTypeRepository categoryTypeRepository;
    @Inject
    private RaceOptionDTOService raceOptionDTOService;
    @Inject
    private RaceOptionRepository raceOptionRepository;

    @Transactional(readOnly = true)
    public ModelDTO findOne(Integer id) {
        return toDTO(modelRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<ModelDTO> complete(String query, int maxResults) {
        List<Model> results = modelRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<ModelDTO> findAll(PageRequestByExample<ModelDTO> req) {
        Example<Model> example = null;
        Model model = toEntity(req.example);

        if (model != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Model_.name.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Model_.fileName.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Model_.color.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(model, matcher);
        }

        Page<Model> page;
        if (example != null) {
            page = modelRepository.findAll(example, req.toPageable());
        } else {
            page = modelRepository.findAll(req.toPageable());
        }

        List<ModelDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ModelDTO save(ModelDTO dto) {
        if (dto == null) {
            return null;
        }

        final Model model;

        if (dto.isIdSet()) {
            Model modelTmp = modelRepository.findOne(dto.id);
            if (modelTmp != null) {
                model = modelTmp;
            } else {
                model = new Model();
                model.setId(dto.id);
            }
        } else {
            model = new Model();
        }

        model.setName(dto.name);

        model.setFileName(dto.fileName);

        model.setColor(dto.color);

        model.setCreationDate(dto.creationDate);

        model.setCreationAuthor(dto.creationAuthor);

        model.setLastModificationDate(dto.lastModificationDate);

        model.setLastModificationAuthor(dto.lastModificationAuthor);

        model.setVersion(dto.version);

        if (dto.cat == null) {
            model.setCat(null);
        } else {
            CategoryType cat = model.getCat();
            if (cat == null || (cat.getId().compareTo(dto.cat.id) != 0)) {
                model.setCat(categoryTypeRepository.findOne(dto.cat.id));
            }
        }

        model.getTheGenders().clear();
        if (dto.theGenders != null) {
            dto.theGenders.stream().forEach(anGender -> model.addAnGender(raceOptionRepository.findOne(anGender.id)));
        }

        return toDTO(modelRepository.save(model));
    }

    /**
     * Converts the passed model to a DTO.
     */
    public ModelDTO toDTO(Model model) {
        return toDTO(model, 1);
    }

    /**
     * Converts the passed model to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param model
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public ModelDTO toDTO(Model model, int depth) {
        if (model == null) {
            return null;
        }

        ModelDTO dto = new ModelDTO();

        dto.id = model.getId();
        dto.name = model.getName();
        dto.fileName = model.getFileName();
        dto.color = model.getColor();
        dto.creationDate = model.getCreationDate();
        dto.creationAuthor = model.getCreationAuthor();
        dto.lastModificationDate = model.getLastModificationDate();
        dto.lastModificationAuthor = model.getLastModificationAuthor();
        dto.version = model.getVersion();
        if (depth-- > 0) {
            dto.cat = categoryTypeDTOService.toDTO(model.getCat(), depth);
            final int fdepth = depth;
            dto.theGenders = model.getTheGenders().stream().map(anGender -> raceOptionDTOService.toDTO(anGender, fdepth)).collect(Collectors.toList());
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Model.
     * Convenient for query by example.
     */
    public Model toEntity(ModelDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Model.
     * Convenient for query by example.
     */
    public Model toEntity(ModelDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Model model = new Model();

        model.setId(dto.id);
        model.setName(dto.name);
        model.setFileName(dto.fileName);
        model.setColor(dto.color);
        model.setCreationDate(dto.creationDate);
        model.setCreationAuthor(dto.creationAuthor);
        model.setLastModificationDate(dto.lastModificationDate);
        model.setLastModificationAuthor(dto.lastModificationAuthor);
        model.setVersion(dto.version);
        if (depth-- > 0) {
            model.setCat(categoryTypeDTOService.toEntity(dto.cat, depth));
        }

        return model;
    }
}