/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Gender;
import com.mycompany.myapp.domain.Gender_;
import com.mycompany.myapp.domain.RaceOption;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.GenderRepository;
import com.mycompany.myapp.repository.RaceOptionRepository;

/**
 * A simple DTO Facility for Gender.
 */
@Service
public class GenderDTOService {

    @Inject
    private GenderRepository genderRepository;
    @Inject
    private RaceOptionDTOService raceOptionDTOService;
    @Inject
    private RaceOptionRepository raceOptionRepository;

    @Transactional(readOnly = true)
    public GenderDTO findOne(Integer id) {
        return toDTO(genderRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<GenderDTO> complete(String query, int maxResults) {
        List<Gender> results = genderRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<GenderDTO> findAll(PageRequestByExample<GenderDTO> req) {
        Example<Gender> example = null;
        Gender gender = toEntity(req.example);

        if (gender != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Gender_.name.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(gender, matcher);
        }

        Page<Gender> page;
        if (example != null) {
            page = genderRepository.findAll(example, req.toPageable());
        } else {
            page = genderRepository.findAll(req.toPageable());
        }

        List<GenderDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public GenderDTO save(GenderDTO dto) {
        if (dto == null) {
            return null;
        }

        final Gender gender;

        if (dto.isIdSet()) {
            Gender genderTmp = genderRepository.findOne(dto.id);
            if (genderTmp != null) {
                gender = genderTmp;
            } else {
                gender = new Gender();
                gender.setId(dto.id);
            }
        } else {
            gender = new Gender();
        }

        gender.setName(dto.name);

        gender.setStrengthmin(dto.strengthmin);

        gender.setStrengthmax(dto.strengthmax);

        gender.setAgilitymin(dto.agilitymin);

        gender.setAgilitymax(dto.agilitymax);

        gender.setEndurancemin(dto.endurancemin);

        gender.setEndurancemax(dto.endurancemax);

        gender.setIntelligencemin(dto.intelligencemin);

        gender.setIntelligencemax(dto.intelligencemax);

        gender.setCharismamin(dto.charismamin);

        gender.setCharismamax(dto.charismamax);

        gender.setPerceptionmin(dto.perceptionmin);

        gender.setPerceptionmax(dto.perceptionmax);

        gender.setLuckmin(dto.luckmin);

        gender.setLuckmax(dto.luckmax);

        gender.setHeightmin(dto.heightmin);

        gender.setHeightmax(dto.heightmax);

        gender.setWeightmin(dto.weightmin);

        gender.setWeightmax(dto.weightmax);

        gender.setCreationDate(dto.creationDate);

        gender.setCreationAuthor(dto.creationAuthor);

        gender.setLastModificationDate(dto.lastModificationDate);

        gender.setLastModificationAuthor(dto.lastModificationAuthor);

        gender.setVersion(dto.version);

        gender.getTheRacesOptions().clear();
        if (dto.theRacesOptions != null) {
            dto.theRacesOptions.stream().forEach(anRaceOption -> gender.addAnRaceOption(raceOptionRepository.findOne(anRaceOption.id)));
        }

        return toDTO(genderRepository.save(gender));
    }

    /**
     * Converts the passed gender to a DTO.
     */
    public GenderDTO toDTO(Gender gender) {
        return toDTO(gender, 1);
    }

    /**
     * Converts the passed gender to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param gender
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public GenderDTO toDTO(Gender gender, int depth) {
        if (gender == null) {
            return null;
        }

        GenderDTO dto = new GenderDTO();

        dto.id = gender.getId();
        dto.name = gender.getName();
        dto.strengthmin = gender.getStrengthmin();
        dto.strengthmax = gender.getStrengthmax();
        dto.agilitymin = gender.getAgilitymin();
        dto.agilitymax = gender.getAgilitymax();
        dto.endurancemin = gender.getEndurancemin();
        dto.endurancemax = gender.getEndurancemax();
        dto.intelligencemin = gender.getIntelligencemin();
        dto.intelligencemax = gender.getIntelligencemax();
        dto.charismamin = gender.getCharismamin();
        dto.charismamax = gender.getCharismamax();
        dto.perceptionmin = gender.getPerceptionmin();
        dto.perceptionmax = gender.getPerceptionmax();
        dto.luckmin = gender.getLuckmin();
        dto.luckmax = gender.getLuckmax();
        dto.heightmin = gender.getHeightmin();
        dto.heightmax = gender.getHeightmax();
        dto.weightmin = gender.getWeightmin();
        dto.weightmax = gender.getWeightmax();
        dto.creationDate = gender.getCreationDate();
        dto.creationAuthor = gender.getCreationAuthor();
        dto.lastModificationDate = gender.getLastModificationDate();
        dto.lastModificationAuthor = gender.getLastModificationAuthor();
        dto.version = gender.getVersion();
        if (depth-- > 0) {
            final int fdepth = depth;
            dto.theRacesOptions = gender.getTheRacesOptions().stream().map(anRaceOption -> raceOptionDTOService.toDTO(anRaceOption, fdepth))
                    .collect(Collectors.toList());
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Gender.
     * Convenient for query by example.
     */
    public Gender toEntity(GenderDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Gender.
     * Convenient for query by example.
     */
    public Gender toEntity(GenderDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Gender gender = new Gender();

        gender.setId(dto.id);
        gender.setName(dto.name);
        gender.setStrengthmin(dto.strengthmin);
        gender.setStrengthmax(dto.strengthmax);
        gender.setAgilitymin(dto.agilitymin);
        gender.setAgilitymax(dto.agilitymax);
        gender.setEndurancemin(dto.endurancemin);
        gender.setEndurancemax(dto.endurancemax);
        gender.setIntelligencemin(dto.intelligencemin);
        gender.setIntelligencemax(dto.intelligencemax);
        gender.setCharismamin(dto.charismamin);
        gender.setCharismamax(dto.charismamax);
        gender.setPerceptionmin(dto.perceptionmin);
        gender.setPerceptionmax(dto.perceptionmax);
        gender.setLuckmin(dto.luckmin);
        gender.setLuckmax(dto.luckmax);
        gender.setHeightmin(dto.heightmin);
        gender.setHeightmax(dto.heightmax);
        gender.setWeightmin(dto.weightmin);
        gender.setWeightmax(dto.weightmax);
        gender.setCreationDate(dto.creationDate);
        gender.setCreationAuthor(dto.creationAuthor);
        gender.setLastModificationDate(dto.lastModificationDate);
        gender.setLastModificationAuthor(dto.lastModificationAuthor);
        gender.setVersion(dto.version);
        if (depth-- > 0) {
        }

        return gender;
    }
}