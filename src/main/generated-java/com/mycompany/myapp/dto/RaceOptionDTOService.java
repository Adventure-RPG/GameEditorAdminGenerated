/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Gender;
import com.mycompany.myapp.domain.Model;
import com.mycompany.myapp.domain.RaceOption;
import com.mycompany.myapp.domain.RaceOption_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.GenderRepository;
import com.mycompany.myapp.repository.ModelRepository;
import com.mycompany.myapp.repository.RaceOptionRepository;

/**
 * A simple DTO Facility for RaceOption.
 */
@Service
public class RaceOptionDTOService {

    @Inject
    private RaceOptionRepository raceOptionRepository;
    @Inject
    private GenderDTOService genderDTOService;
    @Inject
    private GenderRepository genderRepository;
    @Inject
    private ModelDTOService modelDTOService;
    @Inject
    private ModelRepository modelRepository;

    @Transactional(readOnly = true)
    public RaceOptionDTO findOne(Integer id) {
        return toDTO(raceOptionRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<RaceOptionDTO> complete(String query, int maxResults) {
        List<RaceOption> results = raceOptionRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<RaceOptionDTO> findAll(PageRequestByExample<RaceOptionDTO> req) {
        Example<RaceOption> example = null;
        RaceOption raceOption = toEntity(req.example);

        if (raceOption != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(raceOption, matcher);
        }

        Page<RaceOption> page;
        if (example != null) {
            page = raceOptionRepository.findAll(example, req.toPageable());
        } else {
            page = raceOptionRepository.findAll(req.toPageable());
        }

        List<RaceOptionDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public RaceOptionDTO save(RaceOptionDTO dto) {
        if (dto == null) {
            return null;
        }

        final RaceOption raceOption;

        if (dto.isIdSet()) {
            RaceOption raceOptionTmp = raceOptionRepository.findOne(dto.id);
            if (raceOptionTmp != null) {
                raceOption = raceOptionTmp;
            } else {
                raceOption = new RaceOption();
                raceOption.setId(dto.id);
            }
        } else {
            raceOption = new RaceOption();
        }

        raceOption.setStrengthmin(dto.strengthmin);

        raceOption.setStrengthmax(dto.strengthmax);

        raceOption.setAgilitymin(dto.agilitymin);

        raceOption.setAgilitymax(dto.agilitymax);

        raceOption.setEndurancemin(dto.endurancemin);

        raceOption.setEndurancemax(dto.endurancemax);

        raceOption.setIntelligencemin(dto.intelligencemin);

        raceOption.setIntelligencemax(dto.intelligencemax);

        raceOption.setCharismamin(dto.charismamin);

        raceOption.setCharismamax(dto.charismamax);

        raceOption.setPerceptionmin(dto.perceptionmin);

        raceOption.setPerceptionmax(dto.perceptionmax);

        raceOption.setLuckmin(dto.luckmin);

        raceOption.setLuckmax(dto.luckmax);

        raceOption.setHeightmin(dto.heightmin);

        raceOption.setHeightmax(dto.heightmax);

        raceOption.setWeightmin(dto.weightmin);

        raceOption.setWeightmax(dto.weightmax);

        raceOption.setCreationDate(dto.creationDate);

        raceOption.setCreationAuthor(dto.creationAuthor);

        raceOption.setLastModificationDate(dto.lastModificationDate);

        raceOption.setLastModificationAuthor(dto.lastModificationAuthor);

        raceOption.setVersion(dto.version);

        raceOption.getTheGenders().clear();
        if (dto.theGenders != null) {
            dto.theGenders.stream().forEach(anGender -> raceOption.addAnGender(genderRepository.findOne(anGender.id)));
        }

        raceOption.getTheModels().clear();
        if (dto.theModels != null) {
            dto.theModels.stream().forEach(anModel -> raceOption.addAnModel(modelRepository.findOne(anModel.id)));
        }

        return toDTO(raceOptionRepository.save(raceOption));
    }

    /**
     * Converts the passed raceOption to a DTO.
     */
    public RaceOptionDTO toDTO(RaceOption raceOption) {
        return toDTO(raceOption, 1);
    }

    /**
     * Converts the passed raceOption to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param raceOption
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public RaceOptionDTO toDTO(RaceOption raceOption, int depth) {
        if (raceOption == null) {
            return null;
        }

        RaceOptionDTO dto = new RaceOptionDTO();

        dto.id = raceOption.getId();
        dto.strengthmin = raceOption.getStrengthmin();
        dto.strengthmax = raceOption.getStrengthmax();
        dto.agilitymin = raceOption.getAgilitymin();
        dto.agilitymax = raceOption.getAgilitymax();
        dto.endurancemin = raceOption.getEndurancemin();
        dto.endurancemax = raceOption.getEndurancemax();
        dto.intelligencemin = raceOption.getIntelligencemin();
        dto.intelligencemax = raceOption.getIntelligencemax();
        dto.charismamin = raceOption.getCharismamin();
        dto.charismamax = raceOption.getCharismamax();
        dto.perceptionmin = raceOption.getPerceptionmin();
        dto.perceptionmax = raceOption.getPerceptionmax();
        dto.luckmin = raceOption.getLuckmin();
        dto.luckmax = raceOption.getLuckmax();
        dto.heightmin = raceOption.getHeightmin();
        dto.heightmax = raceOption.getHeightmax();
        dto.weightmin = raceOption.getWeightmin();
        dto.weightmax = raceOption.getWeightmax();
        dto.creationDate = raceOption.getCreationDate();
        dto.creationAuthor = raceOption.getCreationAuthor();
        dto.lastModificationDate = raceOption.getLastModificationDate();
        dto.lastModificationAuthor = raceOption.getLastModificationAuthor();
        dto.version = raceOption.getVersion();
        if (depth-- > 0) {
            final int fdepth = depth;
            dto.theGenders = raceOption.getTheGenders().stream().map(anGender -> genderDTOService.toDTO(anGender, fdepth)).collect(Collectors.toList());
            dto.theModels = raceOption.getTheModels().stream().map(anModel -> modelDTOService.toDTO(anModel, fdepth)).collect(Collectors.toList());
        }

        return dto;
    }

    /**
     * Converts the passed dto to a RaceOption.
     * Convenient for query by example.
     */
    public RaceOption toEntity(RaceOptionDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a RaceOption.
     * Convenient for query by example.
     */
    public RaceOption toEntity(RaceOptionDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        RaceOption raceOption = new RaceOption();

        raceOption.setId(dto.id);
        raceOption.setStrengthmin(dto.strengthmin);
        raceOption.setStrengthmax(dto.strengthmax);
        raceOption.setAgilitymin(dto.agilitymin);
        raceOption.setAgilitymax(dto.agilitymax);
        raceOption.setEndurancemin(dto.endurancemin);
        raceOption.setEndurancemax(dto.endurancemax);
        raceOption.setIntelligencemin(dto.intelligencemin);
        raceOption.setIntelligencemax(dto.intelligencemax);
        raceOption.setCharismamin(dto.charismamin);
        raceOption.setCharismamax(dto.charismamax);
        raceOption.setPerceptionmin(dto.perceptionmin);
        raceOption.setPerceptionmax(dto.perceptionmax);
        raceOption.setLuckmin(dto.luckmin);
        raceOption.setLuckmax(dto.luckmax);
        raceOption.setHeightmin(dto.heightmin);
        raceOption.setHeightmax(dto.heightmax);
        raceOption.setWeightmin(dto.weightmin);
        raceOption.setWeightmax(dto.weightmax);
        raceOption.setCreationDate(dto.creationDate);
        raceOption.setCreationAuthor(dto.creationAuthor);
        raceOption.setLastModificationDate(dto.lastModificationDate);
        raceOption.setLastModificationAuthor(dto.lastModificationAuthor);
        raceOption.setVersion(dto.version);
        if (depth-- > 0) {
        }

        return raceOption;
    }
}