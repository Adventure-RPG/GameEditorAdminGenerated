/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Character;
import com.mycompany.myapp.domain.Characteristic;
import com.mycompany.myapp.domain.Characteristic_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.CharacterRepository;
import com.mycompany.myapp.repository.CharacteristicRepository;

/**
 * A simple DTO Facility for Characteristic.
 */
@Service
public class CharacteristicDTOService {

    @Inject
    private CharacteristicRepository characteristicRepository;
    @Inject
    private CharacterDTOService characterDTOService;
    @Inject
    private CharacterRepository characterRepository;

    @Transactional(readOnly = true)
    public CharacteristicDTO findOne(Integer id) {
        return toDTO(characteristicRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<CharacteristicDTO> complete(String query, int maxResults) {
        List<Characteristic> results = characteristicRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<CharacteristicDTO> findAll(PageRequestByExample<CharacteristicDTO> req) {
        Example<Characteristic> example = null;
        Characteristic characteristic = toEntity(req.example);

        if (characteristic != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(characteristic, matcher);
        }

        Page<Characteristic> page;
        if (example != null) {
            page = characteristicRepository.findAll(example, req.toPageable());
        } else {
            page = characteristicRepository.findAll(req.toPageable());
        }

        List<CharacteristicDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public CharacteristicDTO save(CharacteristicDTO dto) {
        if (dto == null) {
            return null;
        }

        final Characteristic characteristic;

        if (dto.isIdSet()) {
            Characteristic characteristicTmp = characteristicRepository.findOne(dto.id);
            if (characteristicTmp != null) {
                characteristic = characteristicTmp;
            } else {
                characteristic = new Characteristic();
                characteristic.setId(dto.id);
            }
        } else {
            characteristic = new Characteristic();
        }

        characteristic.setStrength(dto.strength);

        characteristic.setAgility(dto.agility);

        characteristic.setEndurance(dto.endurance);

        characteristic.setIntelligence(dto.intelligence);

        characteristic.setCharisma(dto.charisma);

        characteristic.setPerception(dto.perception);

        characteristic.setLuck(dto.luck);

        characteristic.setPointsAvailable(dto.pointsAvailable);

        characteristic.setSkillAvailable(dto.skillAvailable);

        characteristic.setCreationDate(dto.creationDate);

        characteristic.setCreationAuthor(dto.creationAuthor);

        characteristic.setLastModificationDate(dto.lastModificationDate);

        characteristic.setLastModificationAuthor(dto.lastModificationAuthor);

        characteristic.setVersion(dto.version);

        return toDTO(characteristicRepository.save(characteristic));
    }

    /**
     * Converts the passed characteristic to a DTO.
     */
    public CharacteristicDTO toDTO(Characteristic characteristic) {
        return toDTO(characteristic, 1);
    }

    /**
     * Converts the passed characteristic to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param characteristic
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public CharacteristicDTO toDTO(Characteristic characteristic, int depth) {
        if (characteristic == null) {
            return null;
        }

        CharacteristicDTO dto = new CharacteristicDTO();

        dto.id = characteristic.getId();
        dto.strength = characteristic.getStrength();
        dto.agility = characteristic.getAgility();
        dto.endurance = characteristic.getEndurance();
        dto.intelligence = characteristic.getIntelligence();
        dto.charisma = characteristic.getCharisma();
        dto.perception = characteristic.getPerception();
        dto.luck = characteristic.getLuck();
        dto.pointsAvailable = characteristic.getPointsAvailable();
        dto.skillAvailable = characteristic.getSkillAvailable();
        dto.creationDate = characteristic.getCreationDate();
        dto.creationAuthor = characteristic.getCreationAuthor();
        dto.lastModificationDate = characteristic.getLastModificationDate();
        dto.lastModificationAuthor = characteristic.getLastModificationAuthor();
        dto.version = characteristic.getVersion();
        if (depth-- > 0) {
            dto.characteristics = characterDTOService.toDTO(characteristic.getCharacteristics(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Characteristic.
     * Convenient for query by example.
     */
    public Characteristic toEntity(CharacteristicDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Characteristic.
     * Convenient for query by example.
     */
    public Characteristic toEntity(CharacteristicDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Characteristic characteristic = new Characteristic();

        characteristic.setId(dto.id);
        characteristic.setStrength(dto.strength);
        characteristic.setAgility(dto.agility);
        characteristic.setEndurance(dto.endurance);
        characteristic.setIntelligence(dto.intelligence);
        characteristic.setCharisma(dto.charisma);
        characteristic.setPerception(dto.perception);
        characteristic.setLuck(dto.luck);
        characteristic.setPointsAvailable(dto.pointsAvailable);
        characteristic.setSkillAvailable(dto.skillAvailable);
        characteristic.setCreationDate(dto.creationDate);
        characteristic.setCreationAuthor(dto.creationAuthor);
        characteristic.setLastModificationDate(dto.lastModificationDate);
        characteristic.setLastModificationAuthor(dto.lastModificationAuthor);
        characteristic.setVersion(dto.version);
        if (depth-- > 0) {
            characteristic.setCharacteristics(characterDTOService.toEntity(dto.characteristics, depth));
        }

        return characteristic;
    }
}