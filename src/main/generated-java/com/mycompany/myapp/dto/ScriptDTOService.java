/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Script;
import com.mycompany.myapp.domain.Script_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.ScriptRepository;

/**
 * A simple DTO Facility for Script.
 */
@Service
public class ScriptDTOService {

    @Inject
    private ScriptRepository scriptRepository;

    @Transactional(readOnly = true)
    public ScriptDTO findOne(Integer id) {
        return toDTO(scriptRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<ScriptDTO> complete(String query, int maxResults) {
        List<Script> results = scriptRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<ScriptDTO> findAll(PageRequestByExample<ScriptDTO> req) {
        Example<Script> example = null;
        Script script = toEntity(req.example);

        if (script != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Script_.name.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Script_.fileName.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Script_.arguments.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(script, matcher);
        }

        Page<Script> page;
        if (example != null) {
            page = scriptRepository.findAll(example, req.toPageable());
        } else {
            page = scriptRepository.findAll(req.toPageable());
        }

        List<ScriptDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ScriptDTO save(ScriptDTO dto) {
        if (dto == null) {
            return null;
        }

        final Script script;

        if (dto.isIdSet()) {
            Script scriptTmp = scriptRepository.findOne(dto.id);
            if (scriptTmp != null) {
                script = scriptTmp;
            } else {
                script = new Script();
                script.setId(dto.id);
            }
        } else {
            script = new Script();
        }

        script.setName(dto.name);

        script.setFileName(dto.fileName);

        script.setArguments(dto.arguments);

        script.setCreationDate(dto.creationDate);

        script.setCreationAuthor(dto.creationAuthor);

        script.setLastModificationDate(dto.lastModificationDate);

        script.setLastModificationAuthor(dto.lastModificationAuthor);

        script.setVersion(dto.version);

        return toDTO(scriptRepository.save(script));
    }

    /**
     * Converts the passed script to a DTO.
     */
    public ScriptDTO toDTO(Script script) {
        return toDTO(script, 1);
    }

    /**
     * Converts the passed script to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param script
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public ScriptDTO toDTO(Script script, int depth) {
        if (script == null) {
            return null;
        }

        ScriptDTO dto = new ScriptDTO();

        dto.id = script.getId();
        dto.name = script.getName();
        dto.fileName = script.getFileName();
        dto.arguments = script.getArguments();
        dto.creationDate = script.getCreationDate();
        dto.creationAuthor = script.getCreationAuthor();
        dto.lastModificationDate = script.getLastModificationDate();
        dto.lastModificationAuthor = script.getLastModificationAuthor();
        dto.version = script.getVersion();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Script.
     * Convenient for query by example.
     */
    public Script toEntity(ScriptDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Script.
     * Convenient for query by example.
     */
    public Script toEntity(ScriptDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Script script = new Script();

        script.setId(dto.id);
        script.setName(dto.name);
        script.setFileName(dto.fileName);
        script.setArguments(dto.arguments);
        script.setCreationDate(dto.creationDate);
        script.setCreationAuthor(dto.creationAuthor);
        script.setLastModificationDate(dto.lastModificationDate);
        script.setLastModificationAuthor(dto.lastModificationAuthor);
        script.setVersion(dto.version);
        if (depth-- > 0) {
        }

        return script;
    }
}