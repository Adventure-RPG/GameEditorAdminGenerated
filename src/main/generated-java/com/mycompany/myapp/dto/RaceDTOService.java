/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Characteristic;
import com.mycompany.myapp.domain.Race;
import com.mycompany.myapp.domain.RaceOption;
import com.mycompany.myapp.domain.Race_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.CharacteristicRepository;
import com.mycompany.myapp.repository.RaceOptionRepository;
import com.mycompany.myapp.repository.RaceRepository;

/**
 * A simple DTO Facility for Race.
 */
@Service
public class RaceDTOService {

    @Inject
    private RaceRepository raceRepository;
    @Inject
    private RaceOptionDTOService raceOptionDTOService;
    @Inject
    private RaceOptionRepository raceOptionRepository;
    @Inject
    private CharacteristicDTOService characteristicDTOService;
    @Inject
    private CharacteristicRepository characteristicRepository;

    @Transactional(readOnly = true)
    public RaceDTO findOne(Integer id) {
        return toDTO(raceRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<RaceDTO> complete(String query, int maxResults) {
        List<Race> results = raceRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<RaceDTO> findAll(PageRequestByExample<RaceDTO> req) {
        Example<Race> example = null;
        Race race = toEntity(req.example);

        if (race != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Race_.name.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Race_.description.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Race_.imgFile.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(race, matcher);
        }

        Page<Race> page;
        if (example != null) {
            page = raceRepository.findAll(example, req.toPageable());
        } else {
            page = raceRepository.findAll(req.toPageable());
        }

        List<RaceDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public RaceDTO save(RaceDTO dto) {
        if (dto == null) {
            return null;
        }

        final Race race;

        if (dto.isIdSet()) {
            Race raceTmp = raceRepository.findOne(dto.id);
            if (raceTmp != null) {
                race = raceTmp;
            } else {
                race = new Race();
                race.setId(dto.id);
            }
        } else {
            race = new Race();
        }

        race.setName(dto.name);

        race.setDescription(dto.description);

        race.setImgFile(dto.imgFile);

        race.setCreationDate(dto.creationDate);

        race.setCreationAuthor(dto.creationAuthor);

        race.setLastModificationDate(dto.lastModificationDate);

        race.setLastModificationAuthor(dto.lastModificationAuthor);

        race.setVersion(dto.version);

        if (dto.raceOpt == null) {
            race.setRaceOpt(null);
        } else {
            RaceOption raceOpt = race.getRaceOpt();
            if (raceOpt == null || (raceOpt.getId().compareTo(dto.raceOpt.id) != 0)) {
                race.setRaceOpt(raceOptionRepository.findOne(dto.raceOpt.id));
            }
        }

        if (dto.charc == null) {
            race.setCharc(null);
        } else {
            Characteristic charc = race.getCharc();
            if (charc == null || (charc.getId().compareTo(dto.charc.id) != 0)) {
                race.setCharc(characteristicRepository.findOne(dto.charc.id));
            }
        }

        return toDTO(raceRepository.save(race));
    }

    /**
     * Converts the passed race to a DTO.
     */
    public RaceDTO toDTO(Race race) {
        return toDTO(race, 1);
    }

    /**
     * Converts the passed race to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param race
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public RaceDTO toDTO(Race race, int depth) {
        if (race == null) {
            return null;
        }

        RaceDTO dto = new RaceDTO();

        dto.id = race.getId();
        dto.name = race.getName();
        dto.description = race.getDescription();
        dto.imgFile = race.getImgFile();
        dto.creationDate = race.getCreationDate();
        dto.creationAuthor = race.getCreationAuthor();
        dto.lastModificationDate = race.getLastModificationDate();
        dto.lastModificationAuthor = race.getLastModificationAuthor();
        dto.version = race.getVersion();
        if (depth-- > 0) {
            dto.raceOpt = raceOptionDTOService.toDTO(race.getRaceOpt(), depth);
            dto.charc = characteristicDTOService.toDTO(race.getCharc(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Race.
     * Convenient for query by example.
     */
    public Race toEntity(RaceDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Race.
     * Convenient for query by example.
     */
    public Race toEntity(RaceDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Race race = new Race();

        race.setId(dto.id);
        race.setName(dto.name);
        race.setDescription(dto.description);
        race.setImgFile(dto.imgFile);
        race.setCreationDate(dto.creationDate);
        race.setCreationAuthor(dto.creationAuthor);
        race.setLastModificationDate(dto.lastModificationDate);
        race.setLastModificationAuthor(dto.lastModificationAuthor);
        race.setVersion(dto.version);
        if (depth-- > 0) {
            race.setRaceOpt(raceOptionDTOService.toEntity(dto.raceOpt, depth));
            race.setCharc(characteristicDTOService.toEntity(dto.charc, depth));
        }

        return race;
    }
}